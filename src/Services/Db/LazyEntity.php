<?php

namespace WebImage\Models\Services\Db;

use WebImage\Models\Entities\Entity;
use WebImage\Models\Services\RepositoryInterface;

class LazyEntity extends Entity
{
	private ?PropertyLoaderInterface $propertyLoader;

	public function __construct(string $model, RepositoryInterface $repo, ?PropertyLoaderInterface $propertyLoader)
	{
		parent::__construct($model, $repo);
		$this->propertyLoader = $propertyLoader;
	}

	/**
	 * Overrides default getPropertyValue to allow properties to be lazily loaded, i.e. especially when the property is multivalued
	 * @param string $name
	 * @return mixed|null
	 */
	public function getPropertyValue(string $name)
	{
		$property = $this->getProperty($name);

		if ($property === null) {
			throw new \InvalidArgumentException(sprintf('%s is not a valid property on %s', $name, $this->getModel()));
		}

		if (!$property->isValueLoaded()) {
			$this->initPropertyValue($name);
		}

		return parent::getPropertyValue($name);
	}
//	public function getProperty($name)
//	{
//		$property = $this->getProperty($name);
//		if (!$property->isValue)
//		return parent::getProperty($name); // TODO: Change the autogenerated stub
//	}

	private function initPropertyValue(string $property): void
	{
		if ($this->propertyLoader === null) return;
		$this->propertyLoader->loadPropertyForEntities($property, [$this]);
	}
}
