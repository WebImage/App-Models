<?php

namespace WebImage\Models\Services\Db\QueryPlanner;

use WebImage\Db\ConnectionManager;
use WebImage\Models\Defs\ModelDefinitionInterface;
use WebImage\Models\Entities\EntityStub;
use WebImage\Models\Properties\SingleValuePropertyInterface;
use WebImage\Models\Services\Db\PropertyLoaderInterface;
use WebImage\Models\Services\RepositoryInterface;

class CompoundPropertyPlan extends PropertyPlan
{
//	public function buildEntity(RepositoryInterface $repo, ConnectionManager $connectionManager, ModelDefinitionInterface $modelDef, EntityStub $entityStub, array $result, PropertyLoaderInterface $propertyLoader)
//	{
//		parent::buildEntity($repo, $connectionManager, $modelDef, $entityStub, $result, $propertyLoader); // TODO: Change the autogenerated stub
//	}
	protected function buildValue(RepositoryInterface $repo, ConnectionManager $connectionManager, EntityStub $entity/*, ModelDefinitionInterface $modelDef*/, array $result, PropertyLoaderInterface $propertyLoader)
	{
		$value = [];

		foreach($this->getColumns() as $column) {
			$value[$column->getSubKey()] = $result[$column->getAlias()] ?? null;
		}

		$property = $entity->getProperty($this->getProperty());
		if ($property === null) throw new \Exception('Property not found: ' . $this->getProperty());

		$property->setValue($value);
	}
}